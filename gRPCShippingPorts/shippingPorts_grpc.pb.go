// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.14.0
// source: gRPCShippingPorts/shippingPorts.proto

package shippingportsproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingPortsClient is the client API for ShippingPorts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingPortsClient interface {
	// Sends a ShippingPort to be saved
	Put(ctx context.Context, in *ShippingPort, opts ...grpc.CallOption) (*Ok, error)
	// Request a ShippingPort by its id
	Get(ctx context.Context, in *ShippingPortId, opts ...grpc.CallOption) (*ShippingPort, error)
}

type shippingPortsClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingPortsClient(cc grpc.ClientConnInterface) ShippingPortsClient {
	return &shippingPortsClient{cc}
}

func (c *shippingPortsClient) Put(ctx context.Context, in *ShippingPort, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/shippingportsproto.ShippingPorts/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingPortsClient) Get(ctx context.Context, in *ShippingPortId, opts ...grpc.CallOption) (*ShippingPort, error) {
	out := new(ShippingPort)
	err := c.cc.Invoke(ctx, "/shippingportsproto.ShippingPorts/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingPortsServer is the server API for ShippingPorts service.
// All implementations must embed UnimplementedShippingPortsServer
// for forward compatibility
type ShippingPortsServer interface {
	// Sends a ShippingPort to be saved
	Put(context.Context, *ShippingPort) (*Ok, error)
	// Request a ShippingPort by its id
	Get(context.Context, *ShippingPortId) (*ShippingPort, error)
	mustEmbedUnimplementedShippingPortsServer()
}

// UnimplementedShippingPortsServer must be embedded to have forward compatible implementations.
type UnimplementedShippingPortsServer struct {
}

func (UnimplementedShippingPortsServer) Put(context.Context, *ShippingPort) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedShippingPortsServer) Get(context.Context, *ShippingPortId) (*ShippingPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedShippingPortsServer) mustEmbedUnimplementedShippingPortsServer() {}

// UnsafeShippingPortsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingPortsServer will
// result in compilation errors.
type UnsafeShippingPortsServer interface {
	mustEmbedUnimplementedShippingPortsServer()
}

func RegisterShippingPortsServer(s grpc.ServiceRegistrar, srv ShippingPortsServer) {
	s.RegisterService(&ShippingPorts_ServiceDesc, srv)
}

func _ShippingPorts_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingPort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingPortsServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippingportsproto.ShippingPorts/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingPortsServer).Put(ctx, req.(*ShippingPort))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingPorts_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingPortId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingPortsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippingportsproto.ShippingPorts/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingPortsServer).Get(ctx, req.(*ShippingPortId))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingPorts_ServiceDesc is the grpc.ServiceDesc for ShippingPorts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingPorts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shippingportsproto.ShippingPorts",
	HandlerType: (*ShippingPortsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ShippingPorts_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ShippingPorts_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPCShippingPorts/shippingPorts.proto",
}
